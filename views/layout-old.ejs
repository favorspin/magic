<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/DT_bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap-colorpicker.css">
    <link rel="stylesheet" href="/styles/bootstrap-colorpicker.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/colorbox.css">
    <link rel="stylesheet" href="/styles/datepicker3.css">
    <link rel="stylesheet" href="/styles/font-awesome.css">
    <link rel="stylesheet" href="/styles/font-awesome.min.css">
    <link rel="stylesheet" href="/styles/fonts.css">
    <link rel="stylesheet" href="/styles/fullcalendar.css">
    <link rel="stylesheet" href="/styles/fullcalendar.print.css">
    <link rel="stylesheet" href="/styles/icheck.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.gritter.css">
    <link rel="stylesheet" href="/styles/opacity-admin.css">
    <link rel="stylesheet" href="/styles/opacity-sliders.css">
    <link rel="stylesheet" href="/styles/perfect-scrollbar.css">
    <link rel="stylesheet" href="/styles/perfect-scrollbar.min.css">
    <link rel="stylesheet" href="/styles/pygments-manni.css">
    <link rel="stylesheet" href="/styles/select2.css">
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="stylesheet" href="/styles/summernote-bs2.css">
    <link rel="stylesheet" href="/styles/summernote-bs3.css">
    <link rel="stylesheet" href="/styles/summernote.css">
    <link rel="stylesheet" href="/styles/xcharts.css">
    <link rel="stylesheet" href="/styles/xcharts.min.css">
    <!--STYLES END-->
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/flot/jquery.flot.min.js"></script>
    <script src="/js/flot/jquery.flot.pie.min.js"></script>
    <script src="/js/flot/jquery.flot.selection.min.js"></script>
    <script src="/js/hogan.min.js"></script>
    <script src="/js/jquery-ui.min.js"></script>
    <script src="/js/jquery.min.js"></script>
    <script src="/js/opacity.switches.js"></script>
    <script src="/js/opacity.widgets.min.js"></script>
    <script src="/js/perfect-scrollbar.min.js"></script>
    <script src="/js/typeahead-example.js"></script>
    <script src="/js/typeahead.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
